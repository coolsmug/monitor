<%- include ("./include/header.ejs") %> 
<%- include ("./include/_dash_board.ejs") %> 
<div class="hrefa"><a href="/admin/all-staffs">All Staffs</a></div>
<div class="staff-detail">
    <%- include ('./partials/messages') %> 

  
                                   
                            <div class="dreout">
                              
                                <form id="allocateForm">
                                <input type="hidden" id="staffId" value="<%= staff._id %>">
                                <select id="classID" required>
                                    <% classes.forEach(c => { %>
                                    <option value="<%= c._id %>"><%= c.name %></option>
                                    <% }) %>
                                </select>
                                <button type="submit">Allocate Class</button>
                                </form>
                            </div>
                           
                                    <table>
                                          
                                        <tbody>
                                            <h3>Staff's Details</h3> 
                                            <tr><th><img src="<%= staff && staff.img.url ? staff.img.url : 'https://res.cloudinary.com/idrynod-001/image/upload/v1756835528/emblems_jk6gea.jpg'%>" alt="Staff Image" width="100"></th></tr>
                                            <tr><th><p>Name:</p></th> <td> <p><%= staff.name %></p></td></tr>
                                            <tr><th><p>Address:</p></th><td><p><%= staff.address %></p> </td></tr>
                                            <tr><th><p>Mobile Number:</p></th> <td><p> <%= staff.mobile_phone %></p></td></tr>
                                            <tr><th><p>Status:</p></th><td><p><%= staff.status %></p></td></tr>
                                            <tr><th><p>Email:</p></th><td><p><%= staff.email %></p></td></tr>
                                            <tr>
                                                <th>
                                                    <h4>Assigned Class:</h4>
                                            </th>
                                                <td>
                                                    
                                                    <ul id="staffClasses">
                                                    <% allocatedClasses.forEach(c => { %>
                                                        <li class="newl">
                                                        <%= c.name || c %>
                                                        <button class="remove-btn" data-class="<%= c._id || c %>" data-staff="<%= staff._id %>">‚ùå </button>
                                                        </li>
                                                    <% }) %>
                                                    </ul>
                                                </td>
                                            </tr>
                                        </tbody>
       
                       
           
        
                                    </table>
                                            <div id="message"></div>
   
</div>
<footer class="foot">
    <h3>All rights reserved and Powered by Dark theme code  <i class="fas fa-copyright"> </i> 2024</h3>
</footer> 

<%- include ("./include/footer.ejs") %>

<style>

  
.staff-detail {
   
    position: relative;
    width: 70%;
    margin: auto;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    /* background-color: #fff; */
    padding: 20px;
    box-shadow: 2px 2px 10px rgb(187, 187, 187);
    gap: 50px;
    margin-top: 50px;

}

.staff-detail table tbody tr::-webkit-scrollbar {
  width: .3em;
  height: .3em;
}
 
.staff-detail table tbody tr::-webkit-scrollbar-track {
  box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.101);
}
 
.staff-detail table tbody tr::-webkit-scrollbar-thumb {
  background: linear-gradient(90deg, var(--white_two)0% 50%, var(--white_three)50% 100%);
  /* outline: 1px solid slategrey; */
  border-radius: 35px;
}

table tbody {
    box-sizing: border-box;
   
    display: flex;
    flex-direction: column;
    justify-content: left;
    align-items:flex-start;
    border: 1px solid  var(--white_one);
    padding: 10px;
    overflow-x: auto;
}

.hrefa{
    margin-top: 60px;
    padding: 20px;
    width: 100%;
    text-align: center;
}

 .hrefa a{
    margin-top: 100px;
    padding: 20px;
    width: 100%;
    color: var(--light-blue);
    text-align: center;
    font-weight: bolder;
    font-family:Arial, Helvetica, sans-serif;
}
table td li {
    font-style: none;
    font-weight: bolder;
    font-family:var(--ubuntu);
    list-style-type:upper-roman;
    padding: 5px 10px;
    font-size: 13px;
}

table tr {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    font-size: 15px;
    gap: 50px;
    border: 2px solid  var(--light-blue);
    overflow: auto;
    padding: 10px;
    
}

th, td {
    text-align: left;
    width: 150px;
    /* border: 2px solid  var(--light-blue); */
}

tr td  p {
    color: seagreen;
}

td li {
    color: yellowgreen;
}

.li a{
    font-style: none;
   
    font-family:Arial, Helvetica, sans-serif;
    color:var(--crimson);
}



input {
    outline: none;
    border: none;
    padding: 6px 12px;
    background-color: var(--deep-blue);
    color: var(--white_one);
    font-family:var(--ubuntu);
    cursor: pointer;
    outline: 2px solid var(--light-blue);
    transition: .3s;
}

select {

    padding: 12px 25px;
    background-color: var(--deep-blue);
    color: var(--white_one);
    font-family:var(--ubuntu);
    cursor: pointer;
    outline: 2px solid var(--light-blue);
    transition: .3s;
}

input:hover {
    outline: 1px solid var(--deep-blue);
    background-color: var(--white_one);
    color: var(--deep-blue);
    border-radius: 5px;
}

form {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 20px;
}

.newl {
    display: flex;
    justify-content: center;
    width: 150px;
    background: #ccc;
    margin-bottom: 5px;
    color: #fff;

}
ul button {
    background: none;
}

.dreout button {
     padding: 12px 14px;
        outline: none;
        border: none;
        background: linear-gradient(to right, rgb(6, 167, 241),rgb(45, 238, 212));
        color: white;
        border-radius: 10px;
        transition: ease-in-out;
}

  .dreout button:hover {
      padding: 12px 14px;
        background: linear-gradient(to right, rgb(6, 22, 241),rgb(45, 238, 61));
        color: white;
    }
</style>



<script>
document.addEventListener("DOMContentLoaded", () => {
  const messageBox = document.getElementById("message");
  const staffId = document.getElementById("staffId").value;
  const allocateForm = document.getElementById("allocateForm");
  const classSelect = document.getElementById("classID");
  const classList = document.getElementById("staffClasses");

  // Utility to show messages
  const showMessage = (msg, color = "green") => {
    messageBox.textContent = msg;
    messageBox.style.color = color;
    setTimeout(() => messageBox.textContent = "", 3000);
  };

  // üü¢ Allocate Class (AJAX)
  allocateForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    const classID = classSelect.value;
    const className = classSelect.options[classSelect.selectedIndex].text;

    try {
      const res = await fetch(`/admin/allocate-staff-class?id=${staffId}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ classID }),
      });

      if (res.ok) {
        showMessage("‚úÖ Class allocated successfully!");
        // Dynamically add new class to list
        const li = document.createElement("li");
        li.innerHTML = `
          ${className}
          <button class="remove-btn" data-class="${classID}" data-staff="${staffId}">‚ùå</button>
        `;
        classList.appendChild(li);

        // Reattach event to new remove button
        attachRemoveHandler(li.querySelector(".remove-btn"));
      } else {
        const data = await res.text();
        showMessage("‚ö†Ô∏è " + data, "red");
      }
    } catch (err) {
      console.error(err);
      showMessage("‚ùå Error allocating class.", "red");
    }
  });

  // üî¥ Function to attach Remove Handler
  const attachRemoveHandler = (btn) => {
    btn.addEventListener("click", async () => {
      const staffId = btn.dataset.staff;
      const classed = btn.dataset.class;
      const parentLi = btn.closest("li");

      if (!confirm("Are you sure you want to remove this class?")) return;

      try {
        const res = await fetch(`/admin/disallocate-staff-class/${staffId}?classed=${classed}`, {
          method: "GET",
        });

        if (res.ok) {
          showMessage("‚úÖ Class disallocated successfully!");
          parentLi.remove(); // remove instantly
        } else {
          showMessage("‚ö†Ô∏è Failed to disallocate class.", "red");
        }
      } catch (err) {
        console.error(err);
        showMessage("‚ùå Error disallocating class.", "red");
      }
    });
  };

  // Attach remove handler to existing buttons at page load
  document.querySelectorAll(".remove-btn").forEach(attachRemoveHandler);
});
</script>
