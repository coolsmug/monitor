
<%- include ("./include/header.ejs") %> 
<%- include ("./include/_dash_board.ejs") %> 
<div class="okayys">
   <h3><a href="/admin/attendance">All Teachers Attendance Summary</a></h3>
   <h3><a href="/admin/dailyattendance">Daily Attendance</a></h3>  

  <div class="oka"> 
<h2>Teacher Face Attendance</h2>
<div class="clock" ></div>
<script>
  setInterval(() => {
  document.querySelector('.clock').innerHTML = new Date().toLocaleTimeString();
}, 1000);

</script>

      <div class="camera-container">
        <video id="video" width="320" height="240" autoplay playsinline></video>
        <canvas id="overlay" width="320" height="240"></canvas>
      </div>

      <div class="controls">
        <button class="button" id="switchCameraBtn" type="button">üîÑ Switch Camera</button>
        <button class="button" id="captureBtn" type="button">üì∏ Capture Face</button>
      </div>

     <script>
  document.getElementById("faceForm").addEventListener("submit", function (e) {
    // Capture exact local device time before submission
    const now =  new Date()

    // Save it in local timezone (not UTC)
    const localTime = now.toLocaleTimeString();; // e.g. "10/9/2025, 9:15:22 AM"
    document.getElementById("deviceTime").value = localTime;
  });
</script>


      <form id="faceForm" method="POST" action="/admin/teacher-clock-in">
        <input type="hidden" name="embedding" id="embedding">
        <!-- new hidden input for local device time -->
        <input type="hidden" name="deviceTime" id="deviceTime">
        
        <button class="button" id="submitBtn" type="submit">‚úÖ Submit Attendance</button>
      </form>


      <pre id="status"></pre>
</div>
</div>

<style>
  .oka {
    
    background: linear-gradient(to right, rgb(6, 167, 241),rgb(45, 238, 212));
     display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  border-radius: 5px;
  color: #ffffff;
  transition: ease-in-out;
  }
.oka:hover {
   background: linear-gradient(to right, rgb(6, 22, 241),rgb(45, 238, 61));
}

  .okayys {
    width: 400px;
  margin: auto;
  margin-top: 100px;
 
 }
.camera-container {

  position: relative;
  display: inline-block;
 
}
#video, #overlay {
  border-radius: 10px;
  transform: scaleX(1); /* ‚úÖ Not mirrored */
}
#overlay {
  position: absolute;
  top: 0;
  left: 0;
}
.controls {
  margin-top: 10px;
}
.button {
  margin: 5px;
  padding: 10px 20px;
  font-size: 15px;
  cursor: pointer;
     border: 2px solid rgba(0, 0, 255, 0.322);
     border-radius: 10px;
}
#status {
  margin-top: 15px;
  font-family: monospace;
  white-space: pre-wrap;
}
</style>



<script defer src="https://cdn.jsdelivr.net/npm/face-api.js@0.22.2/dist/face-api.min.js"></script>

<script>
document.addEventListener("DOMContentLoaded", async () => {
  const video = document.getElementById("video");
  const canvas = document.getElementById("overlay");
  const captureBtn = document.getElementById("captureBtn");
  const switchBtn = document.getElementById("switchCameraBtn");
  const embeddingInput = document.getElementById("embedding");
  const statusBox = document.getElementById("status");
  const deviceTimeInput = document.getElementById("deviceTime");

  let currentStream = null;
  let useBackCamera = true;
  let availableCameras = [];

  await Promise.all([
    faceapi.nets.tinyFaceDetector.loadFromUri("/models"),
    faceapi.nets.faceLandmark68Net.loadFromUri("/models"),
    faceapi.nets.faceRecognitionNet.loadFromUri("/models")
  ]);
  statusBox.textContent = "‚úÖ Face models loaded.";

  async function startCamera() {
    try {
      if (currentStream) {
        currentStream.getTracks().forEach(track => track.stop());
      }

      const devices = await navigator.mediaDevices.enumerateDevices();
      availableCameras = devices.filter(d => d.kind === "videoinput");

      let selectedDevice = null;
      if (availableCameras.length > 1) {
        selectedDevice = availableCameras.find(d =>
          useBackCamera ? /back|rear|environment/i.test(d.label) : /front|user/i.test(d.label)
        );
      }

      const constraints = {
        video: selectedDevice
          ? { deviceId: selectedDevice.deviceId }
          : { facingMode: useBackCamera ? "environment" : "user" }
      };

      currentStream = await navigator.mediaDevices.getUserMedia(constraints);
      video.srcObject = currentStream;

      const side = useBackCamera ? "Back" : "Front";
      statusBox.textContent = `üì∏ ${side} camera active. Position your face clearly.`;
    } catch (err) {
      console.error("Camera error:", err);
      statusBox.textContent = "‚ùå Unable to access camera.";
    }
  }

  switchBtn.addEventListener("click", async () => {
    useBackCamera = !useBackCamera;
    await startCamera();
  });

  // Start camera automatically
  await startCamera();

  captureBtn.addEventListener("click", async () => {
    const detection = await faceapi
      .detectSingleFace(video, new faceapi.TinyFaceDetectorOptions())
      .withFaceLandmarks()
      .withFaceDescriptor();

    const context = canvas.getContext("2d");
    context.clearRect(0, 0, canvas.width, canvas.height);

    if (!detection) {
      statusBox.textContent = "‚ö†Ô∏è No face detected. Try again.";
      return;
    }

    const resized = faceapi.resizeResults(detection, { width: video.width, height: video.height });
    faceapi.draw.drawDetections(canvas, resized);

    embeddingInput.value = JSON.stringify(Array.from(detection.descriptor));
    statusBox.textContent = "‚úÖ Face captured. You can now submit.";
  });

  // üïí Handle form submission
  const form = document.getElementById("faceForm");
  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    // Capture device time just before sending
    const deviceTime = new Date().toISOString();
    deviceTimeInput.value = deviceTime;

    const embeddingValue = embeddingInput.value;
    if (!embeddingValue) {
      statusBox.textContent = "‚ö†Ô∏è Please capture your face before submitting.";
      return;
    }

    try {
      const res = await fetch("/admin/teacher-clock-in", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ embedding: JSON.parse(embeddingValue), deviceTime }),
      });

      const data = await res.json();
      statusBox.textContent = data.message || "No response from server.";
    } catch (err) {
      console.error("Submission Error:", err);
      statusBox.textContent = "‚ùå Failed to submit attendance.";
    }
  });
});
</script>




    
<%- include ("./include/footer.ejs") %> 

